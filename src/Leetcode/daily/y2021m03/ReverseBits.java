package Leetcode.daily.y2021m03;
import org.junit.Assert;
import org.junit.Test;

/**
 * 190. 颠倒二进制位  easy
 * 颠倒给定的 32 位无符号整数的二进制位。
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 * <p>
 * <p>
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 * <p>
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 * 因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。

 * 提示：
 * <p>
 * 输入是一个长度为 32 的二进制字符串
 *
 * @date 03/29/21 8:33
 */
public class ReverseBits {
    private static final int L1 = 0x55555555;
    private static final int L2 = 0x33333333;
    private static final int L3 = 0x0f0f0f0f;
    private static final int L4 = 0x00ff00ff;

    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        n = (n >>> 1 & L1) | ((n & L1) << 1);
        n = (n >>> 2 & L2) | ((n & L2) << 2);
        n = (n >>> 4 & L3) | ((n & L3) << 4);
        n = (n >>> 8 & L4) | ((n & L4) << 8);
        n = (n >>> 16) | (n << 16);
        return n;
    }

    @Test
    public void test() {
        Assert.assertEquals(964176192, reverseBits(43261596));
        //Assert.assertEquals(3221225471, reverseBits(4294967293));
    }
}
